/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BridgeBase, BridgeBaseInterface } from "../BridgeBase";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "date",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "enum BridgeBase.Step",
        name: "step",
        type: "uint8",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "otherChainNonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "processedNonces",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104b63803806104b683398101604081905261002f91610062565b60008054336001600160a01b031991821617909155600180549091166001600160a01b0392909216919091179055610092565b60006020828403121561007457600080fd5b81516001600160a01b038116811461008b57600080fd5b9392505050565b610415806100a16000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063affed0e011610050578063affed0e0146100d7578063f851a440146100ee578063fc0c546a1461011957600080fd5b8063156e29f61461007757806391dae5191461008c5780639dc29fac146100c4575b600080fd5b61008a610085366004610369565b61012c565b005b6100af61009a36600461039c565b60036020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61008a6100d23660046103b5565b610282565b6100e060025481565b6040519081526020016100bb565b600054610101906001600160a01b031681565b6040516001600160a01b0390911681526020016100bb565b600154610101906001600160a01b031681565b60008281526003602052604090205460ff161561018f5760405162461bcd60e51b815260206004820152601a60248201527f7472616e7366657220616c72656164792070726f636573736564000000000000604482015260640160405180910390fd5b60008281526003602052604090819020805460ff191660019081179091555490516335313c2160e11b81526001600160a01b03858116600483015290911690636a62784290602401600060405180830381600087803b1580156101f157600080fd5b505af1158015610205573d6000803e3d6000fd5b5060019250610212915050565b604080513381526001600160a01b0386166020820152908101839052426060820152608081018490527f27757542a5e1b9e8cef80f584e094d4eb63b9802f355c61b3640b71b618d5c8e9060a00160405180910390a260028054906000610278836103df565b9190505550505050565b600154604051632770a7eb60e21b81526001600160a01b0384811660048301526024820184905290911690639dc29fac90604401600060405180830381600087803b1580156102d057600080fd5b505af11580156102e4573d6000803e3d6000fd5b50600092506102f1915050565b600254604080513381526001600160a01b03861660208201528082018590524260608201526080810192909252517f27757542a5e1b9e8cef80f584e094d4eb63b9802f355c61b3640b71b618d5c8e9181900360a00190a25050565b80356001600160a01b038116811461036457600080fd5b919050565b60008060006060848603121561037e57600080fd5b6103878461034d565b95602085013595506040909401359392505050565b6000602082840312156103ae57600080fd5b5035919050565b600080604083850312156103c857600080fd5b6103d18361034d565b946020939093013593505050565b600060001982141561040157634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c634300080a000a";

export class BridgeBase__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BridgeBase> {
    return super.deploy(_token, overrides || {}) as Promise<BridgeBase>;
  }
  getDeployTransaction(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  attach(address: string): BridgeBase {
    return super.attach(address) as BridgeBase;
  }
  connect(signer: Signer): BridgeBase__factory {
    return super.connect(signer) as BridgeBase__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeBaseInterface {
    return new utils.Interface(_abi) as BridgeBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeBase {
    return new Contract(address, _abi, signerOrProvider) as BridgeBase;
  }
}
